  alarm_arm:
    sequence:
      - service: scene.turn_on
        data:
         entity_id: scene.all_lights_out
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.ryan_greeted
      - service: fan.set_speed
        data:
          entity_id: fan.xiaomi_miio_device
          speed: 'Silent'
      - service: telegram_bot.send_message
        data:
          message: Lights automatically shut off. Want the vacuum to run while you're out?
          #note on keyboard vs inline_keyboard
          #inline_keyboard requires callback definition
          keyboard: ["/clean", "/nope"]
          # inline_keyboard:
          #   - "Yes:/clean"
          #   - "No:/nope"

  alarm_front_door_empty_place:
    sequence:
      - service: telegram_bot.send_message
        data:
          message: "ALERT: Front door was opened"

  # telegram_test:
  #   sequence:
  #     - service: telegram_bot.send_message
  #       data_template:
  #        message: The time is {{ states.sensor.time.state }}
  #        message: {{now()}}
  
  battery_status_notify:
    sequence:
      - service: telegram_bot.send_message
        data:
          message: The Air Filter has {{ states.fan.xiaomi_miio_device.attributes.filter_life_remaining }} % life remaining.
  sleep_sequence:
    sequence:
     - service: scene.turn_on
       data:
         entity_id: scene.all_lights_out
     - service: input_boolean.turn_on
       data:
         entity_id: input_boolean.sleep_mode
     - service: climate.set_operation_mode
       data:
         entity_id: climate.den
         operation_mode: 'cool'
     - service: climate.set_temperature
       data:
         entity_id: climate.den
         temperature: 68
     - service: fan.set_speed
       data:
         entity_id: fan.xiaomi_miio_device
         speed: 'Silent'
     - service: media_player.volume_set
       data:
         entity_id: media_player.bedroom
         volume_level: 0.1
     - service: tts.amazon_polly_say
       data_template:
         entity_id: media_player.bedroom
         message: >
           "Goodnight, your alarm clock is turned {{states.input_boolean.alarm_on.state}}."
         cache: false

  roomba_liftoff:
    sequence:
      - service:  vacuum.turn_on
        data:
          entity_id: vacuum.roomba
      # - service: input_boolean.turn_on
      #   data:
      #     entity_id: input_boolean.roomba_run_today
      - service: telegram_bot.send_message
        data:
          message: Roomba will get to suckin.

  # roomba_go_home:
  #   sequence:
  #     - service:  vacuum.return_to_home
  #       data:
  #         entity_id: vacuum.roomba

  roomba_start_pause:
    sequence:
      - service:  vacuum.start_pause
        data:
          entity_id: vacuum.roomba

  roomba_chill:
    sequence:
      - service: telegram_bot.send_message
        data:
          message: Roomba will stay in the corner for now then.

  roomba_died:
    sequence:
      - service: telegram_bot.send_message
        data:
          message: Roomba ran itself to death, like a dumb horse.  It needs to be moved to the dock.

  welcome_home_ryan:
    sequence:
      - service: scene.turn_on
        data:
         entity_id: scene.dope_lights
      - service: media_player.volume_set
        data:
          entity_id: media_player.sonos__den
          volume_level: 0.2
      - delay: '00:00:01'
      - service: tts.amazon_polly_say
        data:
          entity_id: media_player.sonos__den
          message: welcome home ryan
      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.ryan_greeted

  wake_up_ryan:
    sequence:
    #fade in hue lights
    - service: light.turn_on
      data:
        entity_id: light.nightstand
        transition: 90
        xy_color: [0.602,0.373]
        brightness: 251
    - service: light.turn_on
      data:
        entity_id: light.hue_lightstrip_plus_1
        transition: 90
        xy_color: [0.546, 0.417]
        brightness: 254
    #polly tts greeting
    - service: media_player.volume_set
      data:
        entity_id: media_player.bedroom
        volume_level: 0.3
    - delay: '00:00:30'
    - service: tts.amazon_polly_say
      data_template:
        entity_id: media_player.bedroom
        message: "Good morning, the current chance of rain is {{states.sensor.dark_sky_precip_probability.state}} percent"
    #xiaomi light based on precipitation chance during commute
    - service: light.turn_on
      data:
        entity_id: light.xiaomi_gateway
        transition: 30
        xy_color: [0.172,0.747]
        brightness: 255
    - service: light.turn_on
      data:
        entity_id: light.bathroom
        brightness: 255
        transition: 60
    #start music

  suns_out:
    sequence:
    - service: fan.set_speed
      data:
        entity_id: fan.xiaomi_miio_device
        speed: 'Auto'
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.sleep_mode
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.roomba_run_today
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.aqi_notified_today

  fire_in_the_hole:
    sequence:
      - service: script.turn_off
        data:
          entity_id: script.shitters_quiet
      - service: light.turn_on
        data_template:
          entity_id: light.bathroom
          brightness: >
            {% if states.sun.sun.state == 'above_horizon' %}
              255
            {% else %}
              10
            {% endif %}

  shitters_quiet:
    sequence:
      - delay: '00:01:00'
      - service: light.turn_off
        data:
          entity_id: light.bathroom

  sonos_night_volume:
    sequence:
      - service: media_player.volume_set
        data:
          entity_id: media_player.bedroom
          volume_level: 0.15

  sonos_time_test:
    sequence:
      - service: tts.amazon_polly_say
        data:
          entity_id: media_player.sonos__den
          message: "the test worked, yo"
      

  low_nightlight:
    sequence:
      - service: script.turn_off
        data:
          entity_id: script.nightlight_off
      - service: light.turn_on
        data:
          entity_id: light.nightstand
          xy_color: [0.581,0.388]
          brightness: 10

  nightlight_off:
    sequence:
      # - delay: '00:00:03'
      - service: light.turn_off
        data:
          entity_id: light.nightstand

  vacuum_done:
    sequence:
      - service: telegram_bot.send_message
        data:
          message: Roomba is done, docking now...
          keyboard: ["/thanks"]

  youre_welcome:
    sequence:
      - service: telegram_bot.send_message
        data:
          message: 'https://gph.is/1OhAlKC'

  update_hass:
    sequence:
    - service: telegram_bot.send_message
      data:
        message: "There's a new version of Home Assistant available"
        disable_notification: True

  dirty_air_notify_150:
    sequence:
    - service: telegram_bot.send_message
      data:
        message: "It's getting ripe in here, want the air purifier to kick it up a level?"
        disable_notification: False
        keyboard: ["/filter", "/cancerplease"]

  chatbot_filter:
    sequence:
      - service: fan.set_speed
        data:
          entity_id: fan.xiaomi_miio_device
          speed: "Auto"
      - service: telegram_bot.send_message
        data:
          message: 'Bring the noise!'
      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.aqi_notified_today

  chatbot_nofilter:
    sequence:
      - service: telegram_bot.send_message
        data:
          message: 'Suit yourself, human'
      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.aqi_notified_today

  camera_motion_to_s3:
    sequence:
      - delay: '00:00:01'
      - service: shell_command.unifi_camera_snapshot
